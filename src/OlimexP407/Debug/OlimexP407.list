
OlimexP407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001cb4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001e3c  08001e3c  00011e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001e4c  08001e4c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08001e4c  08001e4c  00011e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001e54  08001e54  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001e54  08001e54  00011e54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001e58  08001e58  00011e58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001e5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000b8  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000c4  200000c4  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006ddc  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001361  00000000  00000000  00026e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000610  00000000  00000000  00028180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000568  00000000  00000000  00028790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f6a9  00000000  00000000  00028cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007163  00000000  00000000  000483a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bf0f4  00000000  00000000  0004f504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0010e5f8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001730  00000000  00000000  0010e64c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001e24 	.word	0x08001e24

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001e24 	.word	0x08001e24

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f000 fc2e 	bl	8000d24 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f8cc 	bl	8000664 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 f990 	bl	80007f0 <MX_GPIO_Init>
  MX_DCMI_Init();
 80004d0:	f000 f932 	bl	8000738 <MX_DCMI_Init>
  MX_SPI1_Init();
 80004d4:	f000 f958 	bl	8000788 <MX_SPI1_Init>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (HAL_GPIO_ReadPin(TAMPER_GPIO_Port, TAMPER_Pin) == 0) {
 80004d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004dc:	485e      	ldr	r0, [pc, #376]	; (8000658 <main+0x198>)
 80004de:	f000 ffa5 	bl	800142c <HAL_GPIO_ReadPin>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d116      	bne.n	8000516 <main+0x56>

			HAL_GPIO_WritePin(STAT1_GPIO_Port, STAT1_Pin, 1);
 80004e8:	2201      	movs	r2, #1
 80004ea:	2140      	movs	r1, #64	; 0x40
 80004ec:	485b      	ldr	r0, [pc, #364]	; (800065c <main+0x19c>)
 80004ee:	f000 ffb5 	bl	800145c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STAT2_GPIO_Port, STAT2_Pin, 1);
 80004f2:	2201      	movs	r2, #1
 80004f4:	2180      	movs	r1, #128	; 0x80
 80004f6:	4859      	ldr	r0, [pc, #356]	; (800065c <main+0x19c>)
 80004f8:	f000 ffb0 	bl	800145c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STAT3_GPIO_Port, STAT3_Pin, 1);
 80004fc:	2201      	movs	r2, #1
 80004fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000502:	4856      	ldr	r0, [pc, #344]	; (800065c <main+0x19c>)
 8000504:	f000 ffaa 	bl	800145c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STAT4_GPIO_Port, STAT4_Pin, 1);
 8000508:	2201      	movs	r2, #1
 800050a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800050e:	4853      	ldr	r0, [pc, #332]	; (800065c <main+0x19c>)
 8000510:	f000 ffa4 	bl	800145c <HAL_GPIO_WritePin>
 8000514:	e7e0      	b.n	80004d8 <main+0x18>

		} else if (HAL_GPIO_ReadPin(WKUP_GPIO_Port, WKUP_Pin) == 1) {
 8000516:	2101      	movs	r1, #1
 8000518:	4851      	ldr	r0, [pc, #324]	; (8000660 <main+0x1a0>)
 800051a:	f000 ff87 	bl	800142c <HAL_GPIO_ReadPin>
 800051e:	4603      	mov	r3, r0
 8000520:	2b01      	cmp	r3, #1
 8000522:	d116      	bne.n	8000552 <main+0x92>
			HAL_GPIO_WritePin(STAT1_GPIO_Port, STAT1_Pin, 0);
 8000524:	2200      	movs	r2, #0
 8000526:	2140      	movs	r1, #64	; 0x40
 8000528:	484c      	ldr	r0, [pc, #304]	; (800065c <main+0x19c>)
 800052a:	f000 ff97 	bl	800145c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STAT2_GPIO_Port, STAT2_Pin, 1);
 800052e:	2201      	movs	r2, #1
 8000530:	2180      	movs	r1, #128	; 0x80
 8000532:	484a      	ldr	r0, [pc, #296]	; (800065c <main+0x19c>)
 8000534:	f000 ff92 	bl	800145c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STAT3_GPIO_Port, STAT3_Pin, 1);
 8000538:	2201      	movs	r2, #1
 800053a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800053e:	4847      	ldr	r0, [pc, #284]	; (800065c <main+0x19c>)
 8000540:	f000 ff8c 	bl	800145c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STAT4_GPIO_Port, STAT4_Pin, 0);
 8000544:	2200      	movs	r2, #0
 8000546:	f44f 7100 	mov.w	r1, #512	; 0x200
 800054a:	4844      	ldr	r0, [pc, #272]	; (800065c <main+0x19c>)
 800054c:	f000 ff86 	bl	800145c <HAL_GPIO_WritePin>
 8000550:	e7c2      	b.n	80004d8 <main+0x18>
		}

		else {

			HAL_GPIO_WritePin(STAT1_GPIO_Port, STAT1_Pin, 1);
 8000552:	2201      	movs	r2, #1
 8000554:	2140      	movs	r1, #64	; 0x40
 8000556:	4841      	ldr	r0, [pc, #260]	; (800065c <main+0x19c>)
 8000558:	f000 ff80 	bl	800145c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STAT2_GPIO_Port, STAT2_Pin, 0);
 800055c:	2200      	movs	r2, #0
 800055e:	2180      	movs	r1, #128	; 0x80
 8000560:	483e      	ldr	r0, [pc, #248]	; (800065c <main+0x19c>)
 8000562:	f000 ff7b 	bl	800145c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STAT3_GPIO_Port, STAT3_Pin, 0);
 8000566:	2200      	movs	r2, #0
 8000568:	f44f 7180 	mov.w	r1, #256	; 0x100
 800056c:	483b      	ldr	r0, [pc, #236]	; (800065c <main+0x19c>)
 800056e:	f000 ff75 	bl	800145c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STAT4_GPIO_Port, STAT4_Pin, 0);
 8000572:	2200      	movs	r2, #0
 8000574:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000578:	4838      	ldr	r0, [pc, #224]	; (800065c <main+0x19c>)
 800057a:	f000 ff6f 	bl	800145c <HAL_GPIO_WritePin>
			HAL_Delay(500);
 800057e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000582:	f000 fc41 	bl	8000e08 <HAL_Delay>
			HAL_GPIO_WritePin(STAT1_GPIO_Port, STAT1_Pin, 0);
 8000586:	2200      	movs	r2, #0
 8000588:	2140      	movs	r1, #64	; 0x40
 800058a:	4834      	ldr	r0, [pc, #208]	; (800065c <main+0x19c>)
 800058c:	f000 ff66 	bl	800145c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STAT2_GPIO_Port, STAT2_Pin, 1);
 8000590:	2201      	movs	r2, #1
 8000592:	2180      	movs	r1, #128	; 0x80
 8000594:	4831      	ldr	r0, [pc, #196]	; (800065c <main+0x19c>)
 8000596:	f000 ff61 	bl	800145c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STAT3_GPIO_Port, STAT3_Pin, 0);
 800059a:	2200      	movs	r2, #0
 800059c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005a0:	482e      	ldr	r0, [pc, #184]	; (800065c <main+0x19c>)
 80005a2:	f000 ff5b 	bl	800145c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STAT4_GPIO_Port, STAT4_Pin, 0);
 80005a6:	2200      	movs	r2, #0
 80005a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005ac:	482b      	ldr	r0, [pc, #172]	; (800065c <main+0x19c>)
 80005ae:	f000 ff55 	bl	800145c <HAL_GPIO_WritePin>
			HAL_Delay(500);
 80005b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005b6:	f000 fc27 	bl	8000e08 <HAL_Delay>
			HAL_GPIO_WritePin(STAT1_GPIO_Port, STAT1_Pin, 0);
 80005ba:	2200      	movs	r2, #0
 80005bc:	2140      	movs	r1, #64	; 0x40
 80005be:	4827      	ldr	r0, [pc, #156]	; (800065c <main+0x19c>)
 80005c0:	f000 ff4c 	bl	800145c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STAT2_GPIO_Port, STAT2_Pin, 0);
 80005c4:	2200      	movs	r2, #0
 80005c6:	2180      	movs	r1, #128	; 0x80
 80005c8:	4824      	ldr	r0, [pc, #144]	; (800065c <main+0x19c>)
 80005ca:	f000 ff47 	bl	800145c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STAT3_GPIO_Port, STAT3_Pin, 1);
 80005ce:	2201      	movs	r2, #1
 80005d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005d4:	4821      	ldr	r0, [pc, #132]	; (800065c <main+0x19c>)
 80005d6:	f000 ff41 	bl	800145c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STAT4_GPIO_Port, STAT4_Pin, 0);
 80005da:	2200      	movs	r2, #0
 80005dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005e0:	481e      	ldr	r0, [pc, #120]	; (800065c <main+0x19c>)
 80005e2:	f000 ff3b 	bl	800145c <HAL_GPIO_WritePin>
			HAL_Delay(500);
 80005e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005ea:	f000 fc0d 	bl	8000e08 <HAL_Delay>
			HAL_GPIO_WritePin(STAT1_GPIO_Port, STAT1_Pin, 0);
 80005ee:	2200      	movs	r2, #0
 80005f0:	2140      	movs	r1, #64	; 0x40
 80005f2:	481a      	ldr	r0, [pc, #104]	; (800065c <main+0x19c>)
 80005f4:	f000 ff32 	bl	800145c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STAT2_GPIO_Port, STAT2_Pin, 0);
 80005f8:	2200      	movs	r2, #0
 80005fa:	2180      	movs	r1, #128	; 0x80
 80005fc:	4817      	ldr	r0, [pc, #92]	; (800065c <main+0x19c>)
 80005fe:	f000 ff2d 	bl	800145c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STAT3_GPIO_Port, STAT3_Pin, 0);
 8000602:	2200      	movs	r2, #0
 8000604:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000608:	4814      	ldr	r0, [pc, #80]	; (800065c <main+0x19c>)
 800060a:	f000 ff27 	bl	800145c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STAT4_GPIO_Port, STAT4_Pin, 1);
 800060e:	2201      	movs	r2, #1
 8000610:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000614:	4811      	ldr	r0, [pc, #68]	; (800065c <main+0x19c>)
 8000616:	f000 ff21 	bl	800145c <HAL_GPIO_WritePin>
			HAL_Delay(500);
 800061a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800061e:	f000 fbf3 	bl	8000e08 <HAL_Delay>
			HAL_GPIO_WritePin(STAT1_GPIO_Port, STAT1_Pin, 0);
 8000622:	2200      	movs	r2, #0
 8000624:	2140      	movs	r1, #64	; 0x40
 8000626:	480d      	ldr	r0, [pc, #52]	; (800065c <main+0x19c>)
 8000628:	f000 ff18 	bl	800145c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STAT2_GPIO_Port, STAT2_Pin, 0);
 800062c:	2200      	movs	r2, #0
 800062e:	2180      	movs	r1, #128	; 0x80
 8000630:	480a      	ldr	r0, [pc, #40]	; (800065c <main+0x19c>)
 8000632:	f000 ff13 	bl	800145c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STAT3_GPIO_Port, STAT3_Pin, 0);
 8000636:	2200      	movs	r2, #0
 8000638:	f44f 7180 	mov.w	r1, #256	; 0x100
 800063c:	4807      	ldr	r0, [pc, #28]	; (800065c <main+0x19c>)
 800063e:	f000 ff0d 	bl	800145c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(STAT4_GPIO_Port, STAT4_Pin, 0);
 8000642:	2200      	movs	r2, #0
 8000644:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000648:	4804      	ldr	r0, [pc, #16]	; (800065c <main+0x19c>)
 800064a:	f000 ff07 	bl	800145c <HAL_GPIO_WritePin>
			HAL_Delay(500);
 800064e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000652:	f000 fbd9 	bl	8000e08 <HAL_Delay>
		if (HAL_GPIO_ReadPin(TAMPER_GPIO_Port, TAMPER_Pin) == 0) {
 8000656:	e73f      	b.n	80004d8 <main+0x18>
 8000658:	40020800 	.word	0x40020800
 800065c:	40021400 	.word	0x40021400
 8000660:	40020000 	.word	0x40020000

08000664 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b094      	sub	sp, #80	; 0x50
 8000668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066a:	f107 0320 	add.w	r3, r7, #32
 800066e:	2230      	movs	r2, #48	; 0x30
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f001 fbce 	bl	8001e14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000678:	f107 030c 	add.w	r3, r7, #12
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000688:	2300      	movs	r3, #0
 800068a:	60bb      	str	r3, [r7, #8]
 800068c:	4b28      	ldr	r3, [pc, #160]	; (8000730 <SystemClock_Config+0xcc>)
 800068e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000690:	4a27      	ldr	r2, [pc, #156]	; (8000730 <SystemClock_Config+0xcc>)
 8000692:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000696:	6413      	str	r3, [r2, #64]	; 0x40
 8000698:	4b25      	ldr	r3, [pc, #148]	; (8000730 <SystemClock_Config+0xcc>)
 800069a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800069c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a0:	60bb      	str	r3, [r7, #8]
 80006a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a4:	2300      	movs	r3, #0
 80006a6:	607b      	str	r3, [r7, #4]
 80006a8:	4b22      	ldr	r3, [pc, #136]	; (8000734 <SystemClock_Config+0xd0>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a21      	ldr	r2, [pc, #132]	; (8000734 <SystemClock_Config+0xd0>)
 80006ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b2:	6013      	str	r3, [r2, #0]
 80006b4:	4b1f      	ldr	r3, [pc, #124]	; (8000734 <SystemClock_Config+0xd0>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006c0:	2302      	movs	r3, #2
 80006c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c4:	2301      	movs	r3, #1
 80006c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c8:	2310      	movs	r3, #16
 80006ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006cc:	2302      	movs	r3, #2
 80006ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006d0:	2300      	movs	r3, #0
 80006d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006d4:	2308      	movs	r3, #8
 80006d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80006d8:	2364      	movs	r3, #100	; 0x64
 80006da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006dc:	2302      	movs	r3, #2
 80006de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006e0:	2304      	movs	r3, #4
 80006e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e4:	f107 0320 	add.w	r3, r7, #32
 80006e8:	4618      	mov	r0, r3
 80006ea:	f000 fed1 	bl	8001490 <HAL_RCC_OscConfig>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006f4:	f000 f960 	bl	80009b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f8:	230f      	movs	r3, #15
 80006fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fc:	2302      	movs	r3, #2
 80006fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000700:	2300      	movs	r3, #0
 8000702:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000704:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000708:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800070a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800070e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000710:	f107 030c 	add.w	r3, r7, #12
 8000714:	2103      	movs	r1, #3
 8000716:	4618      	mov	r0, r3
 8000718:	f001 f932 	bl	8001980 <HAL_RCC_ClockConfig>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000722:	f000 f949 	bl	80009b8 <Error_Handler>
  }
}
 8000726:	bf00      	nop
 8000728:	3750      	adds	r7, #80	; 0x50
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40023800 	.word	0x40023800
 8000734:	40007000 	.word	0x40007000

08000738 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 800073c:	4b10      	ldr	r3, [pc, #64]	; (8000780 <MX_DCMI_Init+0x48>)
 800073e:	4a11      	ldr	r2, [pc, #68]	; (8000784 <MX_DCMI_Init+0x4c>)
 8000740:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000742:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <MX_DCMI_Init+0x48>)
 8000744:	2200      	movs	r2, #0
 8000746:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8000748:	4b0d      	ldr	r3, [pc, #52]	; (8000780 <MX_DCMI_Init+0x48>)
 800074a:	2200      	movs	r2, #0
 800074c:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 800074e:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <MX_DCMI_Init+0x48>)
 8000750:	2200      	movs	r2, #0
 8000752:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000754:	4b0a      	ldr	r3, [pc, #40]	; (8000780 <MX_DCMI_Init+0x48>)
 8000756:	2200      	movs	r2, #0
 8000758:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800075a:	4b09      	ldr	r3, [pc, #36]	; (8000780 <MX_DCMI_Init+0x48>)
 800075c:	2200      	movs	r2, #0
 800075e:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000760:	4b07      	ldr	r3, [pc, #28]	; (8000780 <MX_DCMI_Init+0x48>)
 8000762:	2200      	movs	r2, #0
 8000764:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_ENABLE;
 8000766:	4b06      	ldr	r3, [pc, #24]	; (8000780 <MX_DCMI_Init+0x48>)
 8000768:	2208      	movs	r2, #8
 800076a:	621a      	str	r2, [r3, #32]
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 800076c:	4804      	ldr	r0, [pc, #16]	; (8000780 <MX_DCMI_Init+0x48>)
 800076e:	f000 fc54 	bl	800101a <HAL_DCMI_Init>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_DCMI_Init+0x44>
  {
    Error_Handler();
 8000778:	f000 f91e 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 800077c:	bf00      	nop
 800077e:	bd80      	pop	{r7, pc}
 8000780:	20000028 	.word	0x20000028
 8000784:	50050000 	.word	0x50050000

08000788 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800078c:	4b16      	ldr	r3, [pc, #88]	; (80007e8 <MX_SPI1_Init+0x60>)
 800078e:	4a17      	ldr	r2, [pc, #92]	; (80007ec <MX_SPI1_Init+0x64>)
 8000790:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000792:	4b15      	ldr	r3, [pc, #84]	; (80007e8 <MX_SPI1_Init+0x60>)
 8000794:	2200      	movs	r2, #0
 8000796:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000798:	4b13      	ldr	r3, [pc, #76]	; (80007e8 <MX_SPI1_Init+0x60>)
 800079a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800079e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007a0:	4b11      	ldr	r3, [pc, #68]	; (80007e8 <MX_SPI1_Init+0x60>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007a6:	4b10      	ldr	r3, [pc, #64]	; (80007e8 <MX_SPI1_Init+0x60>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007ac:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <MX_SPI1_Init+0x60>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007b2:	4b0d      	ldr	r3, [pc, #52]	; (80007e8 <MX_SPI1_Init+0x60>)
 80007b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007b8:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007ba:	4b0b      	ldr	r3, [pc, #44]	; (80007e8 <MX_SPI1_Init+0x60>)
 80007bc:	2200      	movs	r2, #0
 80007be:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007c0:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <MX_SPI1_Init+0x60>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007c6:	4b08      	ldr	r3, [pc, #32]	; (80007e8 <MX_SPI1_Init+0x60>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007cc:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <MX_SPI1_Init+0x60>)
 80007ce:	220a      	movs	r2, #10
 80007d0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007d2:	4805      	ldr	r0, [pc, #20]	; (80007e8 <MX_SPI1_Init+0x60>)
 80007d4:	f001 fa70 	bl	8001cb8 <HAL_SPI_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_SPI1_Init+0x5a>
  {
    Error_Handler();
 80007de:	f000 f8eb 	bl	80009b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	20000068 	.word	0x20000068
 80007ec:	40013000 	.word	0x40013000

080007f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08c      	sub	sp, #48	; 0x30
 80007f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f6:	f107 031c 	add.w	r3, r7, #28
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
 8000802:	60da      	str	r2, [r3, #12]
 8000804:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	61bb      	str	r3, [r7, #24]
 800080a:	4b65      	ldr	r3, [pc, #404]	; (80009a0 <MX_GPIO_Init+0x1b0>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a64      	ldr	r2, [pc, #400]	; (80009a0 <MX_GPIO_Init+0x1b0>)
 8000810:	f043 0310 	orr.w	r3, r3, #16
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b62      	ldr	r3, [pc, #392]	; (80009a0 <MX_GPIO_Init+0x1b0>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f003 0310 	and.w	r3, r3, #16
 800081e:	61bb      	str	r3, [r7, #24]
 8000820:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	617b      	str	r3, [r7, #20]
 8000826:	4b5e      	ldr	r3, [pc, #376]	; (80009a0 <MX_GPIO_Init+0x1b0>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a5d      	ldr	r2, [pc, #372]	; (80009a0 <MX_GPIO_Init+0x1b0>)
 800082c:	f043 0304 	orr.w	r3, r3, #4
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b5b      	ldr	r3, [pc, #364]	; (80009a0 <MX_GPIO_Init+0x1b0>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f003 0304 	and.w	r3, r3, #4
 800083a:	617b      	str	r3, [r7, #20]
 800083c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	613b      	str	r3, [r7, #16]
 8000842:	4b57      	ldr	r3, [pc, #348]	; (80009a0 <MX_GPIO_Init+0x1b0>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a56      	ldr	r2, [pc, #344]	; (80009a0 <MX_GPIO_Init+0x1b0>)
 8000848:	f043 0320 	orr.w	r3, r3, #32
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b54      	ldr	r3, [pc, #336]	; (80009a0 <MX_GPIO_Init+0x1b0>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f003 0320 	and.w	r3, r3, #32
 8000856:	613b      	str	r3, [r7, #16]
 8000858:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	60fb      	str	r3, [r7, #12]
 800085e:	4b50      	ldr	r3, [pc, #320]	; (80009a0 <MX_GPIO_Init+0x1b0>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a4f      	ldr	r2, [pc, #316]	; (80009a0 <MX_GPIO_Init+0x1b0>)
 8000864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b4d      	ldr	r3, [pc, #308]	; (80009a0 <MX_GPIO_Init+0x1b0>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	60bb      	str	r3, [r7, #8]
 800087a:	4b49      	ldr	r3, [pc, #292]	; (80009a0 <MX_GPIO_Init+0x1b0>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a48      	ldr	r2, [pc, #288]	; (80009a0 <MX_GPIO_Init+0x1b0>)
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b46      	ldr	r3, [pc, #280]	; (80009a0 <MX_GPIO_Init+0x1b0>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	4b42      	ldr	r3, [pc, #264]	; (80009a0 <MX_GPIO_Init+0x1b0>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a41      	ldr	r2, [pc, #260]	; (80009a0 <MX_GPIO_Init+0x1b0>)
 800089c:	f043 0302 	orr.w	r3, r3, #2
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b3f      	ldr	r3, [pc, #252]	; (80009a0 <MX_GPIO_Init+0x1b0>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0302 	and.w	r3, r3, #2
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	603b      	str	r3, [r7, #0]
 80008b2:	4b3b      	ldr	r3, [pc, #236]	; (80009a0 <MX_GPIO_Init+0x1b0>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	4a3a      	ldr	r2, [pc, #232]	; (80009a0 <MX_GPIO_Init+0x1b0>)
 80008b8:	f043 0308 	orr.w	r3, r3, #8
 80008bc:	6313      	str	r3, [r2, #48]	; 0x30
 80008be:	4b38      	ldr	r3, [pc, #224]	; (80009a0 <MX_GPIO_Init+0x1b0>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	f003 0308 	and.w	r3, r3, #8
 80008c6:	603b      	str	r3, [r7, #0]
 80008c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, STAT1_Pin|STAT2_Pin|STAT3_Pin|STAT4_Pin, GPIO_PIN_RESET);
 80008ca:	2200      	movs	r2, #0
 80008cc:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 80008d0:	4834      	ldr	r0, [pc, #208]	; (80009a4 <MX_GPIO_Init+0x1b4>)
 80008d2:	f000 fdc3 	bl	800145c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SOFT_SPI1_MOSI_GPIO_Port, SOFT_SPI1_MOSI_Pin, GPIO_PIN_RESET);
 80008d6:	2200      	movs	r2, #0
 80008d8:	2108      	movs	r1, #8
 80008da:	4833      	ldr	r0, [pc, #204]	; (80009a8 <MX_GPIO_Init+0x1b8>)
 80008dc:	f000 fdbe 	bl	800145c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 80008e0:	2200      	movs	r2, #0
 80008e2:	2101      	movs	r1, #1
 80008e4:	4831      	ldr	r0, [pc, #196]	; (80009ac <MX_GPIO_Init+0x1bc>)
 80008e6:	f000 fdb9 	bl	800145c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_RST_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 80008ea:	2200      	movs	r2, #0
 80008ec:	2148      	movs	r1, #72	; 0x48
 80008ee:	4830      	ldr	r0, [pc, #192]	; (80009b0 <MX_GPIO_Init+0x1c0>)
 80008f0:	f000 fdb4 	bl	800145c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TAMPER_Pin */
  GPIO_InitStruct.Pin = TAMPER_Pin;
 80008f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008fa:	2300      	movs	r3, #0
 80008fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TAMPER_GPIO_Port, &GPIO_InitStruct);
 8000902:	f107 031c 	add.w	r3, r7, #28
 8000906:	4619      	mov	r1, r3
 8000908:	4827      	ldr	r0, [pc, #156]	; (80009a8 <MX_GPIO_Init+0x1b8>)
 800090a:	f000 fbf3 	bl	80010f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : STAT1_Pin STAT2_Pin STAT3_Pin STAT4_Pin */
  GPIO_InitStruct.Pin = STAT1_Pin|STAT2_Pin|STAT3_Pin|STAT4_Pin;
 800090e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000912:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000914:	2301      	movs	r3, #1
 8000916:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091c:	2300      	movs	r3, #0
 800091e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000920:	f107 031c 	add.w	r3, r7, #28
 8000924:	4619      	mov	r1, r3
 8000926:	481f      	ldr	r0, [pc, #124]	; (80009a4 <MX_GPIO_Init+0x1b4>)
 8000928:	f000 fbe4 	bl	80010f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SOFT_SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SOFT_SPI1_MOSI_Pin;
 800092c:	2308      	movs	r3, #8
 800092e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000930:	2301      	movs	r3, #1
 8000932:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000938:	2300      	movs	r3, #0
 800093a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SOFT_SPI1_MOSI_GPIO_Port, &GPIO_InitStruct);
 800093c:	f107 031c 	add.w	r3, r7, #28
 8000940:	4619      	mov	r1, r3
 8000942:	4819      	ldr	r0, [pc, #100]	; (80009a8 <MX_GPIO_Init+0x1b8>)
 8000944:	f000 fbd6 	bl	80010f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : WKUP_Pin */
  GPIO_InitStruct.Pin = WKUP_Pin;
 8000948:	2301      	movs	r3, #1
 800094a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800094c:	2300      	movs	r3, #0
 800094e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(WKUP_GPIO_Port, &GPIO_InitStruct);
 8000954:	f107 031c 	add.w	r3, r7, #28
 8000958:	4619      	mov	r1, r3
 800095a:	4816      	ldr	r0, [pc, #88]	; (80009b4 <MX_GPIO_Init+0x1c4>)
 800095c:	f000 fbca 	bl	80010f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 8000960:	2301      	movs	r3, #1
 8000962:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000964:	2301      	movs	r3, #1
 8000966:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096c:	2300      	movs	r3, #0
 800096e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8000970:	f107 031c 	add.w	r3, r7, #28
 8000974:	4619      	mov	r1, r3
 8000976:	480d      	ldr	r0, [pc, #52]	; (80009ac <MX_GPIO_Init+0x1bc>)
 8000978:	f000 fbbc 	bl	80010f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_CS_Pin;
 800097c:	2348      	movs	r3, #72	; 0x48
 800097e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000980:	2301      	movs	r3, #1
 8000982:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000988:	2300      	movs	r3, #0
 800098a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800098c:	f107 031c 	add.w	r3, r7, #28
 8000990:	4619      	mov	r1, r3
 8000992:	4807      	ldr	r0, [pc, #28]	; (80009b0 <MX_GPIO_Init+0x1c0>)
 8000994:	f000 fbae 	bl	80010f4 <HAL_GPIO_Init>

}
 8000998:	bf00      	nop
 800099a:	3730      	adds	r7, #48	; 0x30
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	40023800 	.word	0x40023800
 80009a4:	40021400 	.word	0x40021400
 80009a8:	40020800 	.word	0x40020800
 80009ac:	40020400 	.word	0x40020400
 80009b0:	40020c00 	.word	0x40020c00
 80009b4:	40020000 	.word	0x40020000

080009b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009bc:	b672      	cpsid	i
}
 80009be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80009c0:	e7fe      	b.n	80009c0 <Error_Handler+0x8>
	...

080009c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	607b      	str	r3, [r7, #4]
 80009ce:	4b10      	ldr	r3, [pc, #64]	; (8000a10 <HAL_MspInit+0x4c>)
 80009d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009d2:	4a0f      	ldr	r2, [pc, #60]	; (8000a10 <HAL_MspInit+0x4c>)
 80009d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009d8:	6453      	str	r3, [r2, #68]	; 0x44
 80009da:	4b0d      	ldr	r3, [pc, #52]	; (8000a10 <HAL_MspInit+0x4c>)
 80009dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009e2:	607b      	str	r3, [r7, #4]
 80009e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	603b      	str	r3, [r7, #0]
 80009ea:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <HAL_MspInit+0x4c>)
 80009ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ee:	4a08      	ldr	r2, [pc, #32]	; (8000a10 <HAL_MspInit+0x4c>)
 80009f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f4:	6413      	str	r3, [r2, #64]	; 0x40
 80009f6:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <HAL_MspInit+0x4c>)
 80009f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009fe:	603b      	str	r3, [r7, #0]
 8000a00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a02:	bf00      	nop
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	40023800 	.word	0x40023800

08000a14 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08c      	sub	sp, #48	; 0x30
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1c:	f107 031c 	add.w	r3, r7, #28
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
 8000a28:	60da      	str	r2, [r3, #12]
 8000a2a:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a4f      	ldr	r2, [pc, #316]	; (8000b70 <HAL_DCMI_MspInit+0x15c>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	f040 8098 	bne.w	8000b68 <HAL_DCMI_MspInit+0x154>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000a38:	2300      	movs	r3, #0
 8000a3a:	61bb      	str	r3, [r7, #24]
 8000a3c:	4b4d      	ldr	r3, [pc, #308]	; (8000b74 <HAL_DCMI_MspInit+0x160>)
 8000a3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a40:	4a4c      	ldr	r2, [pc, #304]	; (8000b74 <HAL_DCMI_MspInit+0x160>)
 8000a42:	f043 0301 	orr.w	r3, r3, #1
 8000a46:	6353      	str	r3, [r2, #52]	; 0x34
 8000a48:	4b4a      	ldr	r3, [pc, #296]	; (8000b74 <HAL_DCMI_MspInit+0x160>)
 8000a4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a4c:	f003 0301 	and.w	r3, r3, #1
 8000a50:	61bb      	str	r3, [r7, #24]
 8000a52:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a54:	2300      	movs	r3, #0
 8000a56:	617b      	str	r3, [r7, #20]
 8000a58:	4b46      	ldr	r3, [pc, #280]	; (8000b74 <HAL_DCMI_MspInit+0x160>)
 8000a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5c:	4a45      	ldr	r2, [pc, #276]	; (8000b74 <HAL_DCMI_MspInit+0x160>)
 8000a5e:	f043 0310 	orr.w	r3, r3, #16
 8000a62:	6313      	str	r3, [r2, #48]	; 0x30
 8000a64:	4b43      	ldr	r3, [pc, #268]	; (8000b74 <HAL_DCMI_MspInit+0x160>)
 8000a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a68:	f003 0310 	and.w	r3, r3, #16
 8000a6c:	617b      	str	r3, [r7, #20]
 8000a6e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a70:	2300      	movs	r3, #0
 8000a72:	613b      	str	r3, [r7, #16]
 8000a74:	4b3f      	ldr	r3, [pc, #252]	; (8000b74 <HAL_DCMI_MspInit+0x160>)
 8000a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a78:	4a3e      	ldr	r2, [pc, #248]	; (8000b74 <HAL_DCMI_MspInit+0x160>)
 8000a7a:	f043 0301 	orr.w	r3, r3, #1
 8000a7e:	6313      	str	r3, [r2, #48]	; 0x30
 8000a80:	4b3c      	ldr	r3, [pc, #240]	; (8000b74 <HAL_DCMI_MspInit+0x160>)
 8000a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a84:	f003 0301 	and.w	r3, r3, #1
 8000a88:	613b      	str	r3, [r7, #16]
 8000a8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	4b38      	ldr	r3, [pc, #224]	; (8000b74 <HAL_DCMI_MspInit+0x160>)
 8000a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a94:	4a37      	ldr	r2, [pc, #220]	; (8000b74 <HAL_DCMI_MspInit+0x160>)
 8000a96:	f043 0304 	orr.w	r3, r3, #4
 8000a9a:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9c:	4b35      	ldr	r3, [pc, #212]	; (8000b74 <HAL_DCMI_MspInit+0x160>)
 8000a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa0:	f003 0304 	and.w	r3, r3, #4
 8000aa4:	60fb      	str	r3, [r7, #12]
 8000aa6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	60bb      	str	r3, [r7, #8]
 8000aac:	4b31      	ldr	r3, [pc, #196]	; (8000b74 <HAL_DCMI_MspInit+0x160>)
 8000aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab0:	4a30      	ldr	r2, [pc, #192]	; (8000b74 <HAL_DCMI_MspInit+0x160>)
 8000ab2:	f043 0302 	orr.w	r3, r3, #2
 8000ab6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab8:	4b2e      	ldr	r3, [pc, #184]	; (8000b74 <HAL_DCMI_MspInit+0x160>)
 8000aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abc:	f003 0302 	and.w	r3, r3, #2
 8000ac0:	60bb      	str	r3, [r7, #8]
 8000ac2:	68bb      	ldr	r3, [r7, #8]
    PA10     ------> DCMI_D1
    PB6     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    PE1     ------> DCMI_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_1;
 8000ac4:	2372      	movs	r3, #114	; 0x72
 8000ac6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000ad4:	230d      	movs	r3, #13
 8000ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ad8:	f107 031c 	add.w	r3, r7, #28
 8000adc:	4619      	mov	r1, r3
 8000ade:	4826      	ldr	r0, [pc, #152]	; (8000b78 <HAL_DCMI_MspInit+0x164>)
 8000ae0:	f000 fb08 	bl	80010f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ae4:	2310      	movs	r3, #16
 8000ae6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af0:	2303      	movs	r3, #3
 8000af2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000af4:	230d      	movs	r3, #13
 8000af6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af8:	f107 031c 	add.w	r3, r7, #28
 8000afc:	4619      	mov	r1, r3
 8000afe:	481f      	ldr	r0, [pc, #124]	; (8000b7c <HAL_DCMI_MspInit+0x168>)
 8000b00:	f000 faf8 	bl	80010f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_10;
 8000b04:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8000b08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b12:	2300      	movs	r3, #0
 8000b14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000b16:	230d      	movs	r3, #13
 8000b18:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1a:	f107 031c 	add.w	r3, r7, #28
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4816      	ldr	r0, [pc, #88]	; (8000b7c <HAL_DCMI_MspInit+0x168>)
 8000b22:	f000 fae7 	bl	80010f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 8000b26:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000b2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b30:	2300      	movs	r3, #0
 8000b32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b34:	2300      	movs	r3, #0
 8000b36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000b38:	230d      	movs	r3, #13
 8000b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b3c:	f107 031c 	add.w	r3, r7, #28
 8000b40:	4619      	mov	r1, r3
 8000b42:	480f      	ldr	r0, [pc, #60]	; (8000b80 <HAL_DCMI_MspInit+0x16c>)
 8000b44:	f000 fad6 	bl	80010f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b48:	23c0      	movs	r3, #192	; 0xc0
 8000b4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b54:	2300      	movs	r3, #0
 8000b56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000b58:	230d      	movs	r3, #13
 8000b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b5c:	f107 031c 	add.w	r3, r7, #28
 8000b60:	4619      	mov	r1, r3
 8000b62:	4808      	ldr	r0, [pc, #32]	; (8000b84 <HAL_DCMI_MspInit+0x170>)
 8000b64:	f000 fac6 	bl	80010f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8000b68:	bf00      	nop
 8000b6a:	3730      	adds	r7, #48	; 0x30
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	50050000 	.word	0x50050000
 8000b74:	40023800 	.word	0x40023800
 8000b78:	40021000 	.word	0x40021000
 8000b7c:	40020000 	.word	0x40020000
 8000b80:	40020800 	.word	0x40020800
 8000b84:	40020400 	.word	0x40020400

08000b88 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b08a      	sub	sp, #40	; 0x28
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]
 8000b9e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a28      	ldr	r2, [pc, #160]	; (8000c48 <HAL_SPI_MspInit+0xc0>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d149      	bne.n	8000c3e <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	613b      	str	r3, [r7, #16]
 8000bae:	4b27      	ldr	r3, [pc, #156]	; (8000c4c <HAL_SPI_MspInit+0xc4>)
 8000bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb2:	4a26      	ldr	r2, [pc, #152]	; (8000c4c <HAL_SPI_MspInit+0xc4>)
 8000bb4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bb8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bba:	4b24      	ldr	r3, [pc, #144]	; (8000c4c <HAL_SPI_MspInit+0xc4>)
 8000bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bc2:	613b      	str	r3, [r7, #16]
 8000bc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	60fb      	str	r3, [r7, #12]
 8000bca:	4b20      	ldr	r3, [pc, #128]	; (8000c4c <HAL_SPI_MspInit+0xc4>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	4a1f      	ldr	r2, [pc, #124]	; (8000c4c <HAL_SPI_MspInit+0xc4>)
 8000bd0:	f043 0301 	orr.w	r3, r3, #1
 8000bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd6:	4b1d      	ldr	r3, [pc, #116]	; (8000c4c <HAL_SPI_MspInit+0xc4>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	f003 0301 	and.w	r3, r3, #1
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	60bb      	str	r3, [r7, #8]
 8000be6:	4b19      	ldr	r3, [pc, #100]	; (8000c4c <HAL_SPI_MspInit+0xc4>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	4a18      	ldr	r2, [pc, #96]	; (8000c4c <HAL_SPI_MspInit+0xc4>)
 8000bec:	f043 0302 	orr.w	r3, r3, #2
 8000bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf2:	4b16      	ldr	r3, [pc, #88]	; (8000c4c <HAL_SPI_MspInit+0xc4>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	f003 0302 	and.w	r3, r3, #2
 8000bfa:	60bb      	str	r3, [r7, #8]
 8000bfc:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000bfe:	2320      	movs	r3, #32
 8000c00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c02:	2302      	movs	r3, #2
 8000c04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c0a:	2303      	movs	r3, #3
 8000c0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c0e:	2305      	movs	r3, #5
 8000c10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c12:	f107 0314 	add.w	r3, r7, #20
 8000c16:	4619      	mov	r1, r3
 8000c18:	480d      	ldr	r0, [pc, #52]	; (8000c50 <HAL_SPI_MspInit+0xc8>)
 8000c1a:	f000 fa6b 	bl	80010f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c1e:	2310      	movs	r3, #16
 8000c20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c22:	2302      	movs	r3, #2
 8000c24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c2a:	2303      	movs	r3, #3
 8000c2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c2e:	2305      	movs	r3, #5
 8000c30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c32:	f107 0314 	add.w	r3, r7, #20
 8000c36:	4619      	mov	r1, r3
 8000c38:	4806      	ldr	r0, [pc, #24]	; (8000c54 <HAL_SPI_MspInit+0xcc>)
 8000c3a:	f000 fa5b 	bl	80010f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c3e:	bf00      	nop
 8000c40:	3728      	adds	r7, #40	; 0x28
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40013000 	.word	0x40013000
 8000c4c:	40023800 	.word	0x40023800
 8000c50:	40020000 	.word	0x40020000
 8000c54:	40020400 	.word	0x40020400

08000c58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c5c:	e7fe      	b.n	8000c5c <NMI_Handler+0x4>

08000c5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c62:	e7fe      	b.n	8000c62 <HardFault_Handler+0x4>

08000c64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c68:	e7fe      	b.n	8000c68 <MemManage_Handler+0x4>

08000c6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c6e:	e7fe      	b.n	8000c6e <BusFault_Handler+0x4>

08000c70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c74:	e7fe      	b.n	8000c74 <UsageFault_Handler+0x4>

08000c76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c76:	b480      	push	{r7}
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr

08000c92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c96:	bf00      	nop
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ca4:	f000 f890 	bl	8000dc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ca8:	bf00      	nop
 8000caa:	bd80      	pop	{r7, pc}

08000cac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cb0:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <SystemInit+0x20>)
 8000cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cb6:	4a05      	ldr	r2, [pc, #20]	; (8000ccc <SystemInit+0x20>)
 8000cb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000cd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d08 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cd4:	480d      	ldr	r0, [pc, #52]	; (8000d0c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cd6:	490e      	ldr	r1, [pc, #56]	; (8000d10 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cd8:	4a0e      	ldr	r2, [pc, #56]	; (8000d14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cdc:	e002      	b.n	8000ce4 <LoopCopyDataInit>

08000cde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ce0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ce2:	3304      	adds	r3, #4

08000ce4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ce4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ce6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ce8:	d3f9      	bcc.n	8000cde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cea:	4a0b      	ldr	r2, [pc, #44]	; (8000d18 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cec:	4c0b      	ldr	r4, [pc, #44]	; (8000d1c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cf0:	e001      	b.n	8000cf6 <LoopFillZerobss>

08000cf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cf4:	3204      	adds	r2, #4

08000cf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cf8:	d3fb      	bcc.n	8000cf2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000cfa:	f7ff ffd7 	bl	8000cac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cfe:	f001 f865 	bl	8001dcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d02:	f7ff fbdd 	bl	80004c0 <main>
  bx  lr    
 8000d06:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d10:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d14:	08001e5c 	.word	0x08001e5c
  ldr r2, =_sbss
 8000d18:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d1c:	200000c4 	.word	0x200000c4

08000d20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d20:	e7fe      	b.n	8000d20 <ADC_IRQHandler>
	...

08000d24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d28:	4b0e      	ldr	r3, [pc, #56]	; (8000d64 <HAL_Init+0x40>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a0d      	ldr	r2, [pc, #52]	; (8000d64 <HAL_Init+0x40>)
 8000d2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d34:	4b0b      	ldr	r3, [pc, #44]	; (8000d64 <HAL_Init+0x40>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a0a      	ldr	r2, [pc, #40]	; (8000d64 <HAL_Init+0x40>)
 8000d3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d40:	4b08      	ldr	r3, [pc, #32]	; (8000d64 <HAL_Init+0x40>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a07      	ldr	r2, [pc, #28]	; (8000d64 <HAL_Init+0x40>)
 8000d46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d4c:	2003      	movs	r0, #3
 8000d4e:	f000 f931 	bl	8000fb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d52:	200f      	movs	r0, #15
 8000d54:	f000 f808 	bl	8000d68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d58:	f7ff fe34 	bl	80009c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d5c:	2300      	movs	r3, #0
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	40023c00 	.word	0x40023c00

08000d68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d70:	4b12      	ldr	r3, [pc, #72]	; (8000dbc <HAL_InitTick+0x54>)
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	4b12      	ldr	r3, [pc, #72]	; (8000dc0 <HAL_InitTick+0x58>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	4619      	mov	r1, r3
 8000d7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d86:	4618      	mov	r0, r3
 8000d88:	f000 f93b 	bl	8001002 <HAL_SYSTICK_Config>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
 8000d94:	e00e      	b.n	8000db4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2b0f      	cmp	r3, #15
 8000d9a:	d80a      	bhi.n	8000db2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	6879      	ldr	r1, [r7, #4]
 8000da0:	f04f 30ff 	mov.w	r0, #4294967295
 8000da4:	f000 f911 	bl	8000fca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000da8:	4a06      	ldr	r2, [pc, #24]	; (8000dc4 <HAL_InitTick+0x5c>)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dae:	2300      	movs	r3, #0
 8000db0:	e000      	b.n	8000db4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	20000000 	.word	0x20000000
 8000dc0:	20000008 	.word	0x20000008
 8000dc4:	20000004 	.word	0x20000004

08000dc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dcc:	4b06      	ldr	r3, [pc, #24]	; (8000de8 <HAL_IncTick+0x20>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	4b06      	ldr	r3, [pc, #24]	; (8000dec <HAL_IncTick+0x24>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4413      	add	r3, r2
 8000dd8:	4a04      	ldr	r2, [pc, #16]	; (8000dec <HAL_IncTick+0x24>)
 8000dda:	6013      	str	r3, [r2, #0]
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	20000008 	.word	0x20000008
 8000dec:	200000c0 	.word	0x200000c0

08000df0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  return uwTick;
 8000df4:	4b03      	ldr	r3, [pc, #12]	; (8000e04 <HAL_GetTick+0x14>)
 8000df6:	681b      	ldr	r3, [r3, #0]
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	200000c0 	.word	0x200000c0

08000e08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e10:	f7ff ffee 	bl	8000df0 <HAL_GetTick>
 8000e14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e20:	d005      	beq.n	8000e2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e22:	4b0a      	ldr	r3, [pc, #40]	; (8000e4c <HAL_Delay+0x44>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	461a      	mov	r2, r3
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e2e:	bf00      	nop
 8000e30:	f7ff ffde 	bl	8000df0 <HAL_GetTick>
 8000e34:	4602      	mov	r2, r0
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	68fa      	ldr	r2, [r7, #12]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d8f7      	bhi.n	8000e30 <HAL_Delay+0x28>
  {
  }
}
 8000e40:	bf00      	nop
 8000e42:	bf00      	nop
 8000e44:	3710      	adds	r7, #16
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20000008 	.word	0x20000008

08000e50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b085      	sub	sp, #20
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	f003 0307 	and.w	r3, r3, #7
 8000e5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e60:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <__NVIC_SetPriorityGrouping+0x44>)
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e66:	68ba      	ldr	r2, [r7, #8]
 8000e68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e82:	4a04      	ldr	r2, [pc, #16]	; (8000e94 <__NVIC_SetPriorityGrouping+0x44>)
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	60d3      	str	r3, [r2, #12]
}
 8000e88:	bf00      	nop
 8000e8a:	3714      	adds	r7, #20
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e9c:	4b04      	ldr	r3, [pc, #16]	; (8000eb0 <__NVIC_GetPriorityGrouping+0x18>)
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	0a1b      	lsrs	r3, r3, #8
 8000ea2:	f003 0307 	and.w	r3, r3, #7
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	6039      	str	r1, [r7, #0]
 8000ebe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	db0a      	blt.n	8000ede <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	b2da      	uxtb	r2, r3
 8000ecc:	490c      	ldr	r1, [pc, #48]	; (8000f00 <__NVIC_SetPriority+0x4c>)
 8000ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed2:	0112      	lsls	r2, r2, #4
 8000ed4:	b2d2      	uxtb	r2, r2
 8000ed6:	440b      	add	r3, r1
 8000ed8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000edc:	e00a      	b.n	8000ef4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	b2da      	uxtb	r2, r3
 8000ee2:	4908      	ldr	r1, [pc, #32]	; (8000f04 <__NVIC_SetPriority+0x50>)
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	f003 030f 	and.w	r3, r3, #15
 8000eea:	3b04      	subs	r3, #4
 8000eec:	0112      	lsls	r2, r2, #4
 8000eee:	b2d2      	uxtb	r2, r2
 8000ef0:	440b      	add	r3, r1
 8000ef2:	761a      	strb	r2, [r3, #24]
}
 8000ef4:	bf00      	nop
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	e000e100 	.word	0xe000e100
 8000f04:	e000ed00 	.word	0xe000ed00

08000f08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b089      	sub	sp, #36	; 0x24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	f003 0307 	and.w	r3, r3, #7
 8000f1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	f1c3 0307 	rsb	r3, r3, #7
 8000f22:	2b04      	cmp	r3, #4
 8000f24:	bf28      	it	cs
 8000f26:	2304      	movcs	r3, #4
 8000f28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	3304      	adds	r3, #4
 8000f2e:	2b06      	cmp	r3, #6
 8000f30:	d902      	bls.n	8000f38 <NVIC_EncodePriority+0x30>
 8000f32:	69fb      	ldr	r3, [r7, #28]
 8000f34:	3b03      	subs	r3, #3
 8000f36:	e000      	b.n	8000f3a <NVIC_EncodePriority+0x32>
 8000f38:	2300      	movs	r3, #0
 8000f3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f40:	69bb      	ldr	r3, [r7, #24]
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	43da      	mvns	r2, r3
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	401a      	ands	r2, r3
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f50:	f04f 31ff 	mov.w	r1, #4294967295
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	fa01 f303 	lsl.w	r3, r1, r3
 8000f5a:	43d9      	mvns	r1, r3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f60:	4313      	orrs	r3, r2
         );
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3724      	adds	r7, #36	; 0x24
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
	...

08000f70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	3b01      	subs	r3, #1
 8000f7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f80:	d301      	bcc.n	8000f86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f82:	2301      	movs	r3, #1
 8000f84:	e00f      	b.n	8000fa6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f86:	4a0a      	ldr	r2, [pc, #40]	; (8000fb0 <SysTick_Config+0x40>)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	3b01      	subs	r3, #1
 8000f8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f8e:	210f      	movs	r1, #15
 8000f90:	f04f 30ff 	mov.w	r0, #4294967295
 8000f94:	f7ff ff8e 	bl	8000eb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f98:	4b05      	ldr	r3, [pc, #20]	; (8000fb0 <SysTick_Config+0x40>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f9e:	4b04      	ldr	r3, [pc, #16]	; (8000fb0 <SysTick_Config+0x40>)
 8000fa0:	2207      	movs	r2, #7
 8000fa2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fa4:	2300      	movs	r3, #0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	e000e010 	.word	0xe000e010

08000fb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f7ff ff47 	bl	8000e50 <__NVIC_SetPriorityGrouping>
}
 8000fc2:	bf00      	nop
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b086      	sub	sp, #24
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	60b9      	str	r1, [r7, #8]
 8000fd4:	607a      	str	r2, [r7, #4]
 8000fd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fdc:	f7ff ff5c 	bl	8000e98 <__NVIC_GetPriorityGrouping>
 8000fe0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fe2:	687a      	ldr	r2, [r7, #4]
 8000fe4:	68b9      	ldr	r1, [r7, #8]
 8000fe6:	6978      	ldr	r0, [r7, #20]
 8000fe8:	f7ff ff8e 	bl	8000f08 <NVIC_EncodePriority>
 8000fec:	4602      	mov	r2, r0
 8000fee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ff2:	4611      	mov	r1, r2
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff ff5d 	bl	8000eb4 <__NVIC_SetPriority>
}
 8000ffa:	bf00      	nop
 8000ffc:	3718      	adds	r7, #24
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	b082      	sub	sp, #8
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f7ff ffb0 	bl	8000f70 <SysTick_Config>
 8001010:	4603      	mov	r3, r0
}
 8001012:	4618      	mov	r0, r3
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	b082      	sub	sp, #8
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d101      	bne.n	800102c <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 8001028:	2301      	movs	r3, #1
 800102a:	e05f      	b.n	80010ec <HAL_DCMI_Init+0xd2>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001032:	b2db      	uxtb	r3, r3
 8001034:	2b00      	cmp	r3, #0
 8001036:	d109      	bne.n	800104c <HAL_DCMI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2200      	movs	r2, #0
 800103c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f7ff fce7 	bl	8000a14 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
    HAL_DCMI_MspInit(hdcmi);
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f7ff fce4 	bl	8000a14 <HAL_DCMI_MspInit>
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2202      	movs	r2, #2
 8001050:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	687a      	ldr	r2, [r7, #4]
 800105c:	6812      	ldr	r2, [r2, #0]
 800105e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001062:	f023 0308 	bic.w	r3, r3, #8
 8001066:	6013      	str	r3, [r2, #0]
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                           | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                           );
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	6819      	ldr	r1, [r3, #0]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	685a      	ldr	r2, [r3, #4]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	695b      	ldr	r3, [r3, #20]
 8001076:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800107c:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	691b      	ldr	r3, [r3, #16]
 8001082:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8001088:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	699b      	ldr	r3, [r3, #24]
 800108e:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8001094:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	430a      	orrs	r2, r1
 800109c:	601a      	str	r2, [r3, #0]
                                     | hdcmi->Init.ByteSelectMode |\
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
                                     hdcmi->Init.LineSelectStart
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                                     );
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	2b10      	cmp	r3, #16
 80010a4:	d112      	bne.n	80010cc <HAL_DCMI_Init+0xb2>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	7f1b      	ldrb	r3, [r3, #28]
 80010aa:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	7f5b      	ldrb	r3, [r3, #29]
 80010b0:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 80010b2:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	7f9b      	ldrb	r3, [r3, #30]
 80010b8:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 80010ba:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_POSITION_ESCR_FEC));
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	7fdb      	ldrb	r3, [r3, #31]
 80010c2:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 80010c8:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 80010ca:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	68da      	ldr	r2, [r3, #12]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f042 021e 	orr.w	r2, r2, #30
 80010da:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2200      	movs	r2, #0
 80010e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2201      	movs	r2, #1
 80010e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  return HAL_OK;
 80010ea:	2300      	movs	r3, #0
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b089      	sub	sp, #36	; 0x24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010fe:	2300      	movs	r3, #0
 8001100:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001102:	2300      	movs	r3, #0
 8001104:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001106:	2300      	movs	r3, #0
 8001108:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800110a:	2300      	movs	r3, #0
 800110c:	61fb      	str	r3, [r7, #28]
 800110e:	e16b      	b.n	80013e8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001110:	2201      	movs	r2, #1
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	697a      	ldr	r2, [r7, #20]
 8001120:	4013      	ands	r3, r2
 8001122:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	429a      	cmp	r2, r3
 800112a:	f040 815a 	bne.w	80013e2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f003 0303 	and.w	r3, r3, #3
 8001136:	2b01      	cmp	r3, #1
 8001138:	d005      	beq.n	8001146 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001142:	2b02      	cmp	r3, #2
 8001144:	d130      	bne.n	80011a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	2203      	movs	r2, #3
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	43db      	mvns	r3, r3
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	4013      	ands	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	68da      	ldr	r2, [r3, #12]
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	4313      	orrs	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800117c:	2201      	movs	r2, #1
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	43db      	mvns	r3, r3
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4013      	ands	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	091b      	lsrs	r3, r3, #4
 8001192:	f003 0201 	and.w	r2, r3, #1
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4313      	orrs	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f003 0303 	and.w	r3, r3, #3
 80011b0:	2b03      	cmp	r3, #3
 80011b2:	d017      	beq.n	80011e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	2203      	movs	r2, #3
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	43db      	mvns	r3, r3
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	4013      	ands	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	689a      	ldr	r2, [r3, #8]
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	4313      	orrs	r3, r2
 80011dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f003 0303 	and.w	r3, r3, #3
 80011ec:	2b02      	cmp	r3, #2
 80011ee:	d123      	bne.n	8001238 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	08da      	lsrs	r2, r3, #3
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3208      	adds	r2, #8
 80011f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	f003 0307 	and.w	r3, r3, #7
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	220f      	movs	r2, #15
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	43db      	mvns	r3, r3
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	4013      	ands	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	691a      	ldr	r2, [r3, #16]
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	f003 0307 	and.w	r3, r3, #7
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	4313      	orrs	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	08da      	lsrs	r2, r3, #3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	3208      	adds	r2, #8
 8001232:	69b9      	ldr	r1, [r7, #24]
 8001234:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	2203      	movs	r2, #3
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	43db      	mvns	r3, r3
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	4013      	ands	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f003 0203 	and.w	r2, r3, #3
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	4313      	orrs	r3, r2
 8001264:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001274:	2b00      	cmp	r3, #0
 8001276:	f000 80b4 	beq.w	80013e2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	60fb      	str	r3, [r7, #12]
 800127e:	4b60      	ldr	r3, [pc, #384]	; (8001400 <HAL_GPIO_Init+0x30c>)
 8001280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001282:	4a5f      	ldr	r2, [pc, #380]	; (8001400 <HAL_GPIO_Init+0x30c>)
 8001284:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001288:	6453      	str	r3, [r2, #68]	; 0x44
 800128a:	4b5d      	ldr	r3, [pc, #372]	; (8001400 <HAL_GPIO_Init+0x30c>)
 800128c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001296:	4a5b      	ldr	r2, [pc, #364]	; (8001404 <HAL_GPIO_Init+0x310>)
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	089b      	lsrs	r3, r3, #2
 800129c:	3302      	adds	r3, #2
 800129e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	f003 0303 	and.w	r3, r3, #3
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	220f      	movs	r2, #15
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	43db      	mvns	r3, r3
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	4013      	ands	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a52      	ldr	r2, [pc, #328]	; (8001408 <HAL_GPIO_Init+0x314>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d02b      	beq.n	800131a <HAL_GPIO_Init+0x226>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a51      	ldr	r2, [pc, #324]	; (800140c <HAL_GPIO_Init+0x318>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d025      	beq.n	8001316 <HAL_GPIO_Init+0x222>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a50      	ldr	r2, [pc, #320]	; (8001410 <HAL_GPIO_Init+0x31c>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d01f      	beq.n	8001312 <HAL_GPIO_Init+0x21e>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a4f      	ldr	r2, [pc, #316]	; (8001414 <HAL_GPIO_Init+0x320>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d019      	beq.n	800130e <HAL_GPIO_Init+0x21a>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a4e      	ldr	r2, [pc, #312]	; (8001418 <HAL_GPIO_Init+0x324>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d013      	beq.n	800130a <HAL_GPIO_Init+0x216>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a4d      	ldr	r2, [pc, #308]	; (800141c <HAL_GPIO_Init+0x328>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d00d      	beq.n	8001306 <HAL_GPIO_Init+0x212>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a4c      	ldr	r2, [pc, #304]	; (8001420 <HAL_GPIO_Init+0x32c>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d007      	beq.n	8001302 <HAL_GPIO_Init+0x20e>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a4b      	ldr	r2, [pc, #300]	; (8001424 <HAL_GPIO_Init+0x330>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d101      	bne.n	80012fe <HAL_GPIO_Init+0x20a>
 80012fa:	2307      	movs	r3, #7
 80012fc:	e00e      	b.n	800131c <HAL_GPIO_Init+0x228>
 80012fe:	2308      	movs	r3, #8
 8001300:	e00c      	b.n	800131c <HAL_GPIO_Init+0x228>
 8001302:	2306      	movs	r3, #6
 8001304:	e00a      	b.n	800131c <HAL_GPIO_Init+0x228>
 8001306:	2305      	movs	r3, #5
 8001308:	e008      	b.n	800131c <HAL_GPIO_Init+0x228>
 800130a:	2304      	movs	r3, #4
 800130c:	e006      	b.n	800131c <HAL_GPIO_Init+0x228>
 800130e:	2303      	movs	r3, #3
 8001310:	e004      	b.n	800131c <HAL_GPIO_Init+0x228>
 8001312:	2302      	movs	r3, #2
 8001314:	e002      	b.n	800131c <HAL_GPIO_Init+0x228>
 8001316:	2301      	movs	r3, #1
 8001318:	e000      	b.n	800131c <HAL_GPIO_Init+0x228>
 800131a:	2300      	movs	r3, #0
 800131c:	69fa      	ldr	r2, [r7, #28]
 800131e:	f002 0203 	and.w	r2, r2, #3
 8001322:	0092      	lsls	r2, r2, #2
 8001324:	4093      	lsls	r3, r2
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	4313      	orrs	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800132c:	4935      	ldr	r1, [pc, #212]	; (8001404 <HAL_GPIO_Init+0x310>)
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	089b      	lsrs	r3, r3, #2
 8001332:	3302      	adds	r3, #2
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800133a:	4b3b      	ldr	r3, [pc, #236]	; (8001428 <HAL_GPIO_Init+0x334>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	43db      	mvns	r3, r3
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	4013      	ands	r3, r2
 8001348:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001352:	2b00      	cmp	r3, #0
 8001354:	d003      	beq.n	800135e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	4313      	orrs	r3, r2
 800135c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800135e:	4a32      	ldr	r2, [pc, #200]	; (8001428 <HAL_GPIO_Init+0x334>)
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001364:	4b30      	ldr	r3, [pc, #192]	; (8001428 <HAL_GPIO_Init+0x334>)
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	43db      	mvns	r3, r3
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	4013      	ands	r3, r2
 8001372:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800137c:	2b00      	cmp	r3, #0
 800137e:	d003      	beq.n	8001388 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	4313      	orrs	r3, r2
 8001386:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001388:	4a27      	ldr	r2, [pc, #156]	; (8001428 <HAL_GPIO_Init+0x334>)
 800138a:	69bb      	ldr	r3, [r7, #24]
 800138c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800138e:	4b26      	ldr	r3, [pc, #152]	; (8001428 <HAL_GPIO_Init+0x334>)
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	43db      	mvns	r3, r3
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	4013      	ands	r3, r2
 800139c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d003      	beq.n	80013b2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80013aa:	69ba      	ldr	r2, [r7, #24]
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013b2:	4a1d      	ldr	r2, [pc, #116]	; (8001428 <HAL_GPIO_Init+0x334>)
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013b8:	4b1b      	ldr	r3, [pc, #108]	; (8001428 <HAL_GPIO_Init+0x334>)
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	43db      	mvns	r3, r3
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	4013      	ands	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d003      	beq.n	80013dc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	4313      	orrs	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013dc:	4a12      	ldr	r2, [pc, #72]	; (8001428 <HAL_GPIO_Init+0x334>)
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	3301      	adds	r3, #1
 80013e6:	61fb      	str	r3, [r7, #28]
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	2b0f      	cmp	r3, #15
 80013ec:	f67f ae90 	bls.w	8001110 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80013f0:	bf00      	nop
 80013f2:	bf00      	nop
 80013f4:	3724      	adds	r7, #36	; 0x24
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	40023800 	.word	0x40023800
 8001404:	40013800 	.word	0x40013800
 8001408:	40020000 	.word	0x40020000
 800140c:	40020400 	.word	0x40020400
 8001410:	40020800 	.word	0x40020800
 8001414:	40020c00 	.word	0x40020c00
 8001418:	40021000 	.word	0x40021000
 800141c:	40021400 	.word	0x40021400
 8001420:	40021800 	.word	0x40021800
 8001424:	40021c00 	.word	0x40021c00
 8001428:	40013c00 	.word	0x40013c00

0800142c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800142c:	b480      	push	{r7}
 800142e:	b085      	sub	sp, #20
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	460b      	mov	r3, r1
 8001436:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	691a      	ldr	r2, [r3, #16]
 800143c:	887b      	ldrh	r3, [r7, #2]
 800143e:	4013      	ands	r3, r2
 8001440:	2b00      	cmp	r3, #0
 8001442:	d002      	beq.n	800144a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001444:	2301      	movs	r3, #1
 8001446:	73fb      	strb	r3, [r7, #15]
 8001448:	e001      	b.n	800144e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800144a:	2300      	movs	r3, #0
 800144c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800144e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001450:	4618      	mov	r0, r3
 8001452:	3714      	adds	r7, #20
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	460b      	mov	r3, r1
 8001466:	807b      	strh	r3, [r7, #2]
 8001468:	4613      	mov	r3, r2
 800146a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800146c:	787b      	ldrb	r3, [r7, #1]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d003      	beq.n	800147a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001472:	887a      	ldrh	r2, [r7, #2]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001478:	e003      	b.n	8001482 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800147a:	887b      	ldrh	r3, [r7, #2]
 800147c:	041a      	lsls	r2, r3, #16
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	619a      	str	r2, [r3, #24]
}
 8001482:	bf00      	nop
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
	...

08001490 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b086      	sub	sp, #24
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d101      	bne.n	80014a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e264      	b.n	800196c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0301 	and.w	r3, r3, #1
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d075      	beq.n	800159a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014ae:	4ba3      	ldr	r3, [pc, #652]	; (800173c <HAL_RCC_OscConfig+0x2ac>)
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	f003 030c 	and.w	r3, r3, #12
 80014b6:	2b04      	cmp	r3, #4
 80014b8:	d00c      	beq.n	80014d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014ba:	4ba0      	ldr	r3, [pc, #640]	; (800173c <HAL_RCC_OscConfig+0x2ac>)
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014c2:	2b08      	cmp	r3, #8
 80014c4:	d112      	bne.n	80014ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014c6:	4b9d      	ldr	r3, [pc, #628]	; (800173c <HAL_RCC_OscConfig+0x2ac>)
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014d2:	d10b      	bne.n	80014ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014d4:	4b99      	ldr	r3, [pc, #612]	; (800173c <HAL_RCC_OscConfig+0x2ac>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d05b      	beq.n	8001598 <HAL_RCC_OscConfig+0x108>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d157      	bne.n	8001598 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	e23f      	b.n	800196c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014f4:	d106      	bne.n	8001504 <HAL_RCC_OscConfig+0x74>
 80014f6:	4b91      	ldr	r3, [pc, #580]	; (800173c <HAL_RCC_OscConfig+0x2ac>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a90      	ldr	r2, [pc, #576]	; (800173c <HAL_RCC_OscConfig+0x2ac>)
 80014fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001500:	6013      	str	r3, [r2, #0]
 8001502:	e01d      	b.n	8001540 <HAL_RCC_OscConfig+0xb0>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800150c:	d10c      	bne.n	8001528 <HAL_RCC_OscConfig+0x98>
 800150e:	4b8b      	ldr	r3, [pc, #556]	; (800173c <HAL_RCC_OscConfig+0x2ac>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a8a      	ldr	r2, [pc, #552]	; (800173c <HAL_RCC_OscConfig+0x2ac>)
 8001514:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001518:	6013      	str	r3, [r2, #0]
 800151a:	4b88      	ldr	r3, [pc, #544]	; (800173c <HAL_RCC_OscConfig+0x2ac>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a87      	ldr	r2, [pc, #540]	; (800173c <HAL_RCC_OscConfig+0x2ac>)
 8001520:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001524:	6013      	str	r3, [r2, #0]
 8001526:	e00b      	b.n	8001540 <HAL_RCC_OscConfig+0xb0>
 8001528:	4b84      	ldr	r3, [pc, #528]	; (800173c <HAL_RCC_OscConfig+0x2ac>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a83      	ldr	r2, [pc, #524]	; (800173c <HAL_RCC_OscConfig+0x2ac>)
 800152e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001532:	6013      	str	r3, [r2, #0]
 8001534:	4b81      	ldr	r3, [pc, #516]	; (800173c <HAL_RCC_OscConfig+0x2ac>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a80      	ldr	r2, [pc, #512]	; (800173c <HAL_RCC_OscConfig+0x2ac>)
 800153a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800153e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d013      	beq.n	8001570 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001548:	f7ff fc52 	bl	8000df0 <HAL_GetTick>
 800154c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800154e:	e008      	b.n	8001562 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001550:	f7ff fc4e 	bl	8000df0 <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	2b64      	cmp	r3, #100	; 0x64
 800155c:	d901      	bls.n	8001562 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e204      	b.n	800196c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001562:	4b76      	ldr	r3, [pc, #472]	; (800173c <HAL_RCC_OscConfig+0x2ac>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d0f0      	beq.n	8001550 <HAL_RCC_OscConfig+0xc0>
 800156e:	e014      	b.n	800159a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001570:	f7ff fc3e 	bl	8000df0 <HAL_GetTick>
 8001574:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001576:	e008      	b.n	800158a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001578:	f7ff fc3a 	bl	8000df0 <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	2b64      	cmp	r3, #100	; 0x64
 8001584:	d901      	bls.n	800158a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e1f0      	b.n	800196c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800158a:	4b6c      	ldr	r3, [pc, #432]	; (800173c <HAL_RCC_OscConfig+0x2ac>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d1f0      	bne.n	8001578 <HAL_RCC_OscConfig+0xe8>
 8001596:	e000      	b.n	800159a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001598:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d063      	beq.n	800166e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015a6:	4b65      	ldr	r3, [pc, #404]	; (800173c <HAL_RCC_OscConfig+0x2ac>)
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	f003 030c 	and.w	r3, r3, #12
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d00b      	beq.n	80015ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015b2:	4b62      	ldr	r3, [pc, #392]	; (800173c <HAL_RCC_OscConfig+0x2ac>)
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015ba:	2b08      	cmp	r3, #8
 80015bc:	d11c      	bne.n	80015f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015be:	4b5f      	ldr	r3, [pc, #380]	; (800173c <HAL_RCC_OscConfig+0x2ac>)
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d116      	bne.n	80015f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ca:	4b5c      	ldr	r3, [pc, #368]	; (800173c <HAL_RCC_OscConfig+0x2ac>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d005      	beq.n	80015e2 <HAL_RCC_OscConfig+0x152>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	68db      	ldr	r3, [r3, #12]
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d001      	beq.n	80015e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e1c4      	b.n	800196c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015e2:	4b56      	ldr	r3, [pc, #344]	; (800173c <HAL_RCC_OscConfig+0x2ac>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	691b      	ldr	r3, [r3, #16]
 80015ee:	00db      	lsls	r3, r3, #3
 80015f0:	4952      	ldr	r1, [pc, #328]	; (800173c <HAL_RCC_OscConfig+0x2ac>)
 80015f2:	4313      	orrs	r3, r2
 80015f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015f6:	e03a      	b.n	800166e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d020      	beq.n	8001642 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001600:	4b4f      	ldr	r3, [pc, #316]	; (8001740 <HAL_RCC_OscConfig+0x2b0>)
 8001602:	2201      	movs	r2, #1
 8001604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001606:	f7ff fbf3 	bl	8000df0 <HAL_GetTick>
 800160a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800160c:	e008      	b.n	8001620 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800160e:	f7ff fbef 	bl	8000df0 <HAL_GetTick>
 8001612:	4602      	mov	r2, r0
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	2b02      	cmp	r3, #2
 800161a:	d901      	bls.n	8001620 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800161c:	2303      	movs	r3, #3
 800161e:	e1a5      	b.n	800196c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001620:	4b46      	ldr	r3, [pc, #280]	; (800173c <HAL_RCC_OscConfig+0x2ac>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 0302 	and.w	r3, r3, #2
 8001628:	2b00      	cmp	r3, #0
 800162a:	d0f0      	beq.n	800160e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800162c:	4b43      	ldr	r3, [pc, #268]	; (800173c <HAL_RCC_OscConfig+0x2ac>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	691b      	ldr	r3, [r3, #16]
 8001638:	00db      	lsls	r3, r3, #3
 800163a:	4940      	ldr	r1, [pc, #256]	; (800173c <HAL_RCC_OscConfig+0x2ac>)
 800163c:	4313      	orrs	r3, r2
 800163e:	600b      	str	r3, [r1, #0]
 8001640:	e015      	b.n	800166e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001642:	4b3f      	ldr	r3, [pc, #252]	; (8001740 <HAL_RCC_OscConfig+0x2b0>)
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001648:	f7ff fbd2 	bl	8000df0 <HAL_GetTick>
 800164c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800164e:	e008      	b.n	8001662 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001650:	f7ff fbce 	bl	8000df0 <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	2b02      	cmp	r3, #2
 800165c:	d901      	bls.n	8001662 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800165e:	2303      	movs	r3, #3
 8001660:	e184      	b.n	800196c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001662:	4b36      	ldr	r3, [pc, #216]	; (800173c <HAL_RCC_OscConfig+0x2ac>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d1f0      	bne.n	8001650 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0308 	and.w	r3, r3, #8
 8001676:	2b00      	cmp	r3, #0
 8001678:	d030      	beq.n	80016dc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	695b      	ldr	r3, [r3, #20]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d016      	beq.n	80016b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001682:	4b30      	ldr	r3, [pc, #192]	; (8001744 <HAL_RCC_OscConfig+0x2b4>)
 8001684:	2201      	movs	r2, #1
 8001686:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001688:	f7ff fbb2 	bl	8000df0 <HAL_GetTick>
 800168c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800168e:	e008      	b.n	80016a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001690:	f7ff fbae 	bl	8000df0 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b02      	cmp	r3, #2
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e164      	b.n	800196c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016a2:	4b26      	ldr	r3, [pc, #152]	; (800173c <HAL_RCC_OscConfig+0x2ac>)
 80016a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d0f0      	beq.n	8001690 <HAL_RCC_OscConfig+0x200>
 80016ae:	e015      	b.n	80016dc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016b0:	4b24      	ldr	r3, [pc, #144]	; (8001744 <HAL_RCC_OscConfig+0x2b4>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016b6:	f7ff fb9b 	bl	8000df0 <HAL_GetTick>
 80016ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016bc:	e008      	b.n	80016d0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016be:	f7ff fb97 	bl	8000df0 <HAL_GetTick>
 80016c2:	4602      	mov	r2, r0
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d901      	bls.n	80016d0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80016cc:	2303      	movs	r3, #3
 80016ce:	e14d      	b.n	800196c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016d0:	4b1a      	ldr	r3, [pc, #104]	; (800173c <HAL_RCC_OscConfig+0x2ac>)
 80016d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016d4:	f003 0302 	and.w	r3, r3, #2
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d1f0      	bne.n	80016be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0304 	and.w	r3, r3, #4
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	f000 80a0 	beq.w	800182a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016ea:	2300      	movs	r3, #0
 80016ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016ee:	4b13      	ldr	r3, [pc, #76]	; (800173c <HAL_RCC_OscConfig+0x2ac>)
 80016f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d10f      	bne.n	800171a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016fa:	2300      	movs	r3, #0
 80016fc:	60bb      	str	r3, [r7, #8]
 80016fe:	4b0f      	ldr	r3, [pc, #60]	; (800173c <HAL_RCC_OscConfig+0x2ac>)
 8001700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001702:	4a0e      	ldr	r2, [pc, #56]	; (800173c <HAL_RCC_OscConfig+0x2ac>)
 8001704:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001708:	6413      	str	r3, [r2, #64]	; 0x40
 800170a:	4b0c      	ldr	r3, [pc, #48]	; (800173c <HAL_RCC_OscConfig+0x2ac>)
 800170c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001712:	60bb      	str	r3, [r7, #8]
 8001714:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001716:	2301      	movs	r3, #1
 8001718:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800171a:	4b0b      	ldr	r3, [pc, #44]	; (8001748 <HAL_RCC_OscConfig+0x2b8>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001722:	2b00      	cmp	r3, #0
 8001724:	d121      	bne.n	800176a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001726:	4b08      	ldr	r3, [pc, #32]	; (8001748 <HAL_RCC_OscConfig+0x2b8>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a07      	ldr	r2, [pc, #28]	; (8001748 <HAL_RCC_OscConfig+0x2b8>)
 800172c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001730:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001732:	f7ff fb5d 	bl	8000df0 <HAL_GetTick>
 8001736:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001738:	e011      	b.n	800175e <HAL_RCC_OscConfig+0x2ce>
 800173a:	bf00      	nop
 800173c:	40023800 	.word	0x40023800
 8001740:	42470000 	.word	0x42470000
 8001744:	42470e80 	.word	0x42470e80
 8001748:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800174c:	f7ff fb50 	bl	8000df0 <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	2b02      	cmp	r3, #2
 8001758:	d901      	bls.n	800175e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e106      	b.n	800196c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800175e:	4b85      	ldr	r3, [pc, #532]	; (8001974 <HAL_RCC_OscConfig+0x4e4>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001766:	2b00      	cmp	r3, #0
 8001768:	d0f0      	beq.n	800174c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	2b01      	cmp	r3, #1
 8001770:	d106      	bne.n	8001780 <HAL_RCC_OscConfig+0x2f0>
 8001772:	4b81      	ldr	r3, [pc, #516]	; (8001978 <HAL_RCC_OscConfig+0x4e8>)
 8001774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001776:	4a80      	ldr	r2, [pc, #512]	; (8001978 <HAL_RCC_OscConfig+0x4e8>)
 8001778:	f043 0301 	orr.w	r3, r3, #1
 800177c:	6713      	str	r3, [r2, #112]	; 0x70
 800177e:	e01c      	b.n	80017ba <HAL_RCC_OscConfig+0x32a>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	2b05      	cmp	r3, #5
 8001786:	d10c      	bne.n	80017a2 <HAL_RCC_OscConfig+0x312>
 8001788:	4b7b      	ldr	r3, [pc, #492]	; (8001978 <HAL_RCC_OscConfig+0x4e8>)
 800178a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800178c:	4a7a      	ldr	r2, [pc, #488]	; (8001978 <HAL_RCC_OscConfig+0x4e8>)
 800178e:	f043 0304 	orr.w	r3, r3, #4
 8001792:	6713      	str	r3, [r2, #112]	; 0x70
 8001794:	4b78      	ldr	r3, [pc, #480]	; (8001978 <HAL_RCC_OscConfig+0x4e8>)
 8001796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001798:	4a77      	ldr	r2, [pc, #476]	; (8001978 <HAL_RCC_OscConfig+0x4e8>)
 800179a:	f043 0301 	orr.w	r3, r3, #1
 800179e:	6713      	str	r3, [r2, #112]	; 0x70
 80017a0:	e00b      	b.n	80017ba <HAL_RCC_OscConfig+0x32a>
 80017a2:	4b75      	ldr	r3, [pc, #468]	; (8001978 <HAL_RCC_OscConfig+0x4e8>)
 80017a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017a6:	4a74      	ldr	r2, [pc, #464]	; (8001978 <HAL_RCC_OscConfig+0x4e8>)
 80017a8:	f023 0301 	bic.w	r3, r3, #1
 80017ac:	6713      	str	r3, [r2, #112]	; 0x70
 80017ae:	4b72      	ldr	r3, [pc, #456]	; (8001978 <HAL_RCC_OscConfig+0x4e8>)
 80017b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017b2:	4a71      	ldr	r2, [pc, #452]	; (8001978 <HAL_RCC_OscConfig+0x4e8>)
 80017b4:	f023 0304 	bic.w	r3, r3, #4
 80017b8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d015      	beq.n	80017ee <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017c2:	f7ff fb15 	bl	8000df0 <HAL_GetTick>
 80017c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017c8:	e00a      	b.n	80017e0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017ca:	f7ff fb11 	bl	8000df0 <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80017d8:	4293      	cmp	r3, r2
 80017da:	d901      	bls.n	80017e0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	e0c5      	b.n	800196c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017e0:	4b65      	ldr	r3, [pc, #404]	; (8001978 <HAL_RCC_OscConfig+0x4e8>)
 80017e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017e4:	f003 0302 	and.w	r3, r3, #2
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d0ee      	beq.n	80017ca <HAL_RCC_OscConfig+0x33a>
 80017ec:	e014      	b.n	8001818 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ee:	f7ff faff 	bl	8000df0 <HAL_GetTick>
 80017f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017f4:	e00a      	b.n	800180c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017f6:	f7ff fafb 	bl	8000df0 <HAL_GetTick>
 80017fa:	4602      	mov	r2, r0
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	f241 3288 	movw	r2, #5000	; 0x1388
 8001804:	4293      	cmp	r3, r2
 8001806:	d901      	bls.n	800180c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001808:	2303      	movs	r3, #3
 800180a:	e0af      	b.n	800196c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800180c:	4b5a      	ldr	r3, [pc, #360]	; (8001978 <HAL_RCC_OscConfig+0x4e8>)
 800180e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001810:	f003 0302 	and.w	r3, r3, #2
 8001814:	2b00      	cmp	r3, #0
 8001816:	d1ee      	bne.n	80017f6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001818:	7dfb      	ldrb	r3, [r7, #23]
 800181a:	2b01      	cmp	r3, #1
 800181c:	d105      	bne.n	800182a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800181e:	4b56      	ldr	r3, [pc, #344]	; (8001978 <HAL_RCC_OscConfig+0x4e8>)
 8001820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001822:	4a55      	ldr	r2, [pc, #340]	; (8001978 <HAL_RCC_OscConfig+0x4e8>)
 8001824:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001828:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	699b      	ldr	r3, [r3, #24]
 800182e:	2b00      	cmp	r3, #0
 8001830:	f000 809b 	beq.w	800196a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001834:	4b50      	ldr	r3, [pc, #320]	; (8001978 <HAL_RCC_OscConfig+0x4e8>)
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	f003 030c 	and.w	r3, r3, #12
 800183c:	2b08      	cmp	r3, #8
 800183e:	d05c      	beq.n	80018fa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	699b      	ldr	r3, [r3, #24]
 8001844:	2b02      	cmp	r3, #2
 8001846:	d141      	bne.n	80018cc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001848:	4b4c      	ldr	r3, [pc, #304]	; (800197c <HAL_RCC_OscConfig+0x4ec>)
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800184e:	f7ff facf 	bl	8000df0 <HAL_GetTick>
 8001852:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001854:	e008      	b.n	8001868 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001856:	f7ff facb 	bl	8000df0 <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	2b02      	cmp	r3, #2
 8001862:	d901      	bls.n	8001868 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e081      	b.n	800196c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001868:	4b43      	ldr	r3, [pc, #268]	; (8001978 <HAL_RCC_OscConfig+0x4e8>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d1f0      	bne.n	8001856 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	69da      	ldr	r2, [r3, #28]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6a1b      	ldr	r3, [r3, #32]
 800187c:	431a      	orrs	r2, r3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001882:	019b      	lsls	r3, r3, #6
 8001884:	431a      	orrs	r2, r3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800188a:	085b      	lsrs	r3, r3, #1
 800188c:	3b01      	subs	r3, #1
 800188e:	041b      	lsls	r3, r3, #16
 8001890:	431a      	orrs	r2, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001896:	061b      	lsls	r3, r3, #24
 8001898:	4937      	ldr	r1, [pc, #220]	; (8001978 <HAL_RCC_OscConfig+0x4e8>)
 800189a:	4313      	orrs	r3, r2
 800189c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800189e:	4b37      	ldr	r3, [pc, #220]	; (800197c <HAL_RCC_OscConfig+0x4ec>)
 80018a0:	2201      	movs	r2, #1
 80018a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a4:	f7ff faa4 	bl	8000df0 <HAL_GetTick>
 80018a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018aa:	e008      	b.n	80018be <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018ac:	f7ff faa0 	bl	8000df0 <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d901      	bls.n	80018be <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e056      	b.n	800196c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018be:	4b2e      	ldr	r3, [pc, #184]	; (8001978 <HAL_RCC_OscConfig+0x4e8>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d0f0      	beq.n	80018ac <HAL_RCC_OscConfig+0x41c>
 80018ca:	e04e      	b.n	800196a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018cc:	4b2b      	ldr	r3, [pc, #172]	; (800197c <HAL_RCC_OscConfig+0x4ec>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d2:	f7ff fa8d 	bl	8000df0 <HAL_GetTick>
 80018d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018d8:	e008      	b.n	80018ec <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018da:	f7ff fa89 	bl	8000df0 <HAL_GetTick>
 80018de:	4602      	mov	r2, r0
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	d901      	bls.n	80018ec <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80018e8:	2303      	movs	r3, #3
 80018ea:	e03f      	b.n	800196c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ec:	4b22      	ldr	r3, [pc, #136]	; (8001978 <HAL_RCC_OscConfig+0x4e8>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d1f0      	bne.n	80018da <HAL_RCC_OscConfig+0x44a>
 80018f8:	e037      	b.n	800196a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	699b      	ldr	r3, [r3, #24]
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d101      	bne.n	8001906 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e032      	b.n	800196c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001906:	4b1c      	ldr	r3, [pc, #112]	; (8001978 <HAL_RCC_OscConfig+0x4e8>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	2b01      	cmp	r3, #1
 8001912:	d028      	beq.n	8001966 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800191e:	429a      	cmp	r2, r3
 8001920:	d121      	bne.n	8001966 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800192c:	429a      	cmp	r2, r3
 800192e:	d11a      	bne.n	8001966 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001930:	68fa      	ldr	r2, [r7, #12]
 8001932:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001936:	4013      	ands	r3, r2
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800193c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800193e:	4293      	cmp	r3, r2
 8001940:	d111      	bne.n	8001966 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800194c:	085b      	lsrs	r3, r3, #1
 800194e:	3b01      	subs	r3, #1
 8001950:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001952:	429a      	cmp	r2, r3
 8001954:	d107      	bne.n	8001966 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001960:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001962:	429a      	cmp	r2, r3
 8001964:	d001      	beq.n	800196a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e000      	b.n	800196c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800196a:	2300      	movs	r3, #0
}
 800196c:	4618      	mov	r0, r3
 800196e:	3718      	adds	r7, #24
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	40007000 	.word	0x40007000
 8001978:	40023800 	.word	0x40023800
 800197c:	42470060 	.word	0x42470060

08001980 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d101      	bne.n	8001994 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e0cc      	b.n	8001b2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001994:	4b68      	ldr	r3, [pc, #416]	; (8001b38 <HAL_RCC_ClockConfig+0x1b8>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0307 	and.w	r3, r3, #7
 800199c:	683a      	ldr	r2, [r7, #0]
 800199e:	429a      	cmp	r2, r3
 80019a0:	d90c      	bls.n	80019bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019a2:	4b65      	ldr	r3, [pc, #404]	; (8001b38 <HAL_RCC_ClockConfig+0x1b8>)
 80019a4:	683a      	ldr	r2, [r7, #0]
 80019a6:	b2d2      	uxtb	r2, r2
 80019a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019aa:	4b63      	ldr	r3, [pc, #396]	; (8001b38 <HAL_RCC_ClockConfig+0x1b8>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0307 	and.w	r3, r3, #7
 80019b2:	683a      	ldr	r2, [r7, #0]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d001      	beq.n	80019bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e0b8      	b.n	8001b2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0302 	and.w	r3, r3, #2
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d020      	beq.n	8001a0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0304 	and.w	r3, r3, #4
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d005      	beq.n	80019e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019d4:	4b59      	ldr	r3, [pc, #356]	; (8001b3c <HAL_RCC_ClockConfig+0x1bc>)
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	4a58      	ldr	r2, [pc, #352]	; (8001b3c <HAL_RCC_ClockConfig+0x1bc>)
 80019da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80019de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0308 	and.w	r3, r3, #8
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d005      	beq.n	80019f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019ec:	4b53      	ldr	r3, [pc, #332]	; (8001b3c <HAL_RCC_ClockConfig+0x1bc>)
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	4a52      	ldr	r2, [pc, #328]	; (8001b3c <HAL_RCC_ClockConfig+0x1bc>)
 80019f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80019f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019f8:	4b50      	ldr	r3, [pc, #320]	; (8001b3c <HAL_RCC_ClockConfig+0x1bc>)
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	494d      	ldr	r1, [pc, #308]	; (8001b3c <HAL_RCC_ClockConfig+0x1bc>)
 8001a06:	4313      	orrs	r3, r2
 8001a08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d044      	beq.n	8001aa0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d107      	bne.n	8001a2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a1e:	4b47      	ldr	r3, [pc, #284]	; (8001b3c <HAL_RCC_ClockConfig+0x1bc>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d119      	bne.n	8001a5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e07f      	b.n	8001b2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d003      	beq.n	8001a3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a3a:	2b03      	cmp	r3, #3
 8001a3c:	d107      	bne.n	8001a4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a3e:	4b3f      	ldr	r3, [pc, #252]	; (8001b3c <HAL_RCC_ClockConfig+0x1bc>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d109      	bne.n	8001a5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e06f      	b.n	8001b2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a4e:	4b3b      	ldr	r3, [pc, #236]	; (8001b3c <HAL_RCC_ClockConfig+0x1bc>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d101      	bne.n	8001a5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e067      	b.n	8001b2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a5e:	4b37      	ldr	r3, [pc, #220]	; (8001b3c <HAL_RCC_ClockConfig+0x1bc>)
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	f023 0203 	bic.w	r2, r3, #3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	4934      	ldr	r1, [pc, #208]	; (8001b3c <HAL_RCC_ClockConfig+0x1bc>)
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a70:	f7ff f9be 	bl	8000df0 <HAL_GetTick>
 8001a74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a76:	e00a      	b.n	8001a8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a78:	f7ff f9ba 	bl	8000df0 <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e04f      	b.n	8001b2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a8e:	4b2b      	ldr	r3, [pc, #172]	; (8001b3c <HAL_RCC_ClockConfig+0x1bc>)
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	f003 020c 	and.w	r2, r3, #12
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d1eb      	bne.n	8001a78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001aa0:	4b25      	ldr	r3, [pc, #148]	; (8001b38 <HAL_RCC_ClockConfig+0x1b8>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0307 	and.w	r3, r3, #7
 8001aa8:	683a      	ldr	r2, [r7, #0]
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d20c      	bcs.n	8001ac8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aae:	4b22      	ldr	r3, [pc, #136]	; (8001b38 <HAL_RCC_ClockConfig+0x1b8>)
 8001ab0:	683a      	ldr	r2, [r7, #0]
 8001ab2:	b2d2      	uxtb	r2, r2
 8001ab4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ab6:	4b20      	ldr	r3, [pc, #128]	; (8001b38 <HAL_RCC_ClockConfig+0x1b8>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0307 	and.w	r3, r3, #7
 8001abe:	683a      	ldr	r2, [r7, #0]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d001      	beq.n	8001ac8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e032      	b.n	8001b2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0304 	and.w	r3, r3, #4
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d008      	beq.n	8001ae6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ad4:	4b19      	ldr	r3, [pc, #100]	; (8001b3c <HAL_RCC_ClockConfig+0x1bc>)
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	4916      	ldr	r1, [pc, #88]	; (8001b3c <HAL_RCC_ClockConfig+0x1bc>)
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0308 	and.w	r3, r3, #8
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d009      	beq.n	8001b06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001af2:	4b12      	ldr	r3, [pc, #72]	; (8001b3c <HAL_RCC_ClockConfig+0x1bc>)
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	691b      	ldr	r3, [r3, #16]
 8001afe:	00db      	lsls	r3, r3, #3
 8001b00:	490e      	ldr	r1, [pc, #56]	; (8001b3c <HAL_RCC_ClockConfig+0x1bc>)
 8001b02:	4313      	orrs	r3, r2
 8001b04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b06:	f000 f821 	bl	8001b4c <HAL_RCC_GetSysClockFreq>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	4b0b      	ldr	r3, [pc, #44]	; (8001b3c <HAL_RCC_ClockConfig+0x1bc>)
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	091b      	lsrs	r3, r3, #4
 8001b12:	f003 030f 	and.w	r3, r3, #15
 8001b16:	490a      	ldr	r1, [pc, #40]	; (8001b40 <HAL_RCC_ClockConfig+0x1c0>)
 8001b18:	5ccb      	ldrb	r3, [r1, r3]
 8001b1a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b1e:	4a09      	ldr	r2, [pc, #36]	; (8001b44 <HAL_RCC_ClockConfig+0x1c4>)
 8001b20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b22:	4b09      	ldr	r3, [pc, #36]	; (8001b48 <HAL_RCC_ClockConfig+0x1c8>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff f91e 	bl	8000d68 <HAL_InitTick>

  return HAL_OK;
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3710      	adds	r7, #16
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	40023c00 	.word	0x40023c00
 8001b3c:	40023800 	.word	0x40023800
 8001b40:	08001e3c 	.word	0x08001e3c
 8001b44:	20000000 	.word	0x20000000
 8001b48:	20000004 	.word	0x20000004

08001b4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b4c:	b5b0      	push	{r4, r5, r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b52:	2100      	movs	r1, #0
 8001b54:	6079      	str	r1, [r7, #4]
 8001b56:	2100      	movs	r1, #0
 8001b58:	60f9      	str	r1, [r7, #12]
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001b5e:	2100      	movs	r1, #0
 8001b60:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b62:	4952      	ldr	r1, [pc, #328]	; (8001cac <HAL_RCC_GetSysClockFreq+0x160>)
 8001b64:	6889      	ldr	r1, [r1, #8]
 8001b66:	f001 010c 	and.w	r1, r1, #12
 8001b6a:	2908      	cmp	r1, #8
 8001b6c:	d00d      	beq.n	8001b8a <HAL_RCC_GetSysClockFreq+0x3e>
 8001b6e:	2908      	cmp	r1, #8
 8001b70:	f200 8094 	bhi.w	8001c9c <HAL_RCC_GetSysClockFreq+0x150>
 8001b74:	2900      	cmp	r1, #0
 8001b76:	d002      	beq.n	8001b7e <HAL_RCC_GetSysClockFreq+0x32>
 8001b78:	2904      	cmp	r1, #4
 8001b7a:	d003      	beq.n	8001b84 <HAL_RCC_GetSysClockFreq+0x38>
 8001b7c:	e08e      	b.n	8001c9c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b7e:	4b4c      	ldr	r3, [pc, #304]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x164>)
 8001b80:	60bb      	str	r3, [r7, #8]
       break;
 8001b82:	e08e      	b.n	8001ca2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b84:	4b4b      	ldr	r3, [pc, #300]	; (8001cb4 <HAL_RCC_GetSysClockFreq+0x168>)
 8001b86:	60bb      	str	r3, [r7, #8]
      break;
 8001b88:	e08b      	b.n	8001ca2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b8a:	4948      	ldr	r1, [pc, #288]	; (8001cac <HAL_RCC_GetSysClockFreq+0x160>)
 8001b8c:	6849      	ldr	r1, [r1, #4]
 8001b8e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001b92:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b94:	4945      	ldr	r1, [pc, #276]	; (8001cac <HAL_RCC_GetSysClockFreq+0x160>)
 8001b96:	6849      	ldr	r1, [r1, #4]
 8001b98:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001b9c:	2900      	cmp	r1, #0
 8001b9e:	d024      	beq.n	8001bea <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ba0:	4942      	ldr	r1, [pc, #264]	; (8001cac <HAL_RCC_GetSysClockFreq+0x160>)
 8001ba2:	6849      	ldr	r1, [r1, #4]
 8001ba4:	0989      	lsrs	r1, r1, #6
 8001ba6:	4608      	mov	r0, r1
 8001ba8:	f04f 0100 	mov.w	r1, #0
 8001bac:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001bb0:	f04f 0500 	mov.w	r5, #0
 8001bb4:	ea00 0204 	and.w	r2, r0, r4
 8001bb8:	ea01 0305 	and.w	r3, r1, r5
 8001bbc:	493d      	ldr	r1, [pc, #244]	; (8001cb4 <HAL_RCC_GetSysClockFreq+0x168>)
 8001bbe:	fb01 f003 	mul.w	r0, r1, r3
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	fb01 f102 	mul.w	r1, r1, r2
 8001bc8:	1844      	adds	r4, r0, r1
 8001bca:	493a      	ldr	r1, [pc, #232]	; (8001cb4 <HAL_RCC_GetSysClockFreq+0x168>)
 8001bcc:	fba2 0101 	umull	r0, r1, r2, r1
 8001bd0:	1863      	adds	r3, r4, r1
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	f04f 0300 	mov.w	r3, #0
 8001bdc:	f7fe faf4 	bl	80001c8 <__aeabi_uldivmod>
 8001be0:	4602      	mov	r2, r0
 8001be2:	460b      	mov	r3, r1
 8001be4:	4613      	mov	r3, r2
 8001be6:	60fb      	str	r3, [r7, #12]
 8001be8:	e04a      	b.n	8001c80 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bea:	4b30      	ldr	r3, [pc, #192]	; (8001cac <HAL_RCC_GetSysClockFreq+0x160>)
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	099b      	lsrs	r3, r3, #6
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	f04f 0300 	mov.w	r3, #0
 8001bf6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001bfa:	f04f 0100 	mov.w	r1, #0
 8001bfe:	ea02 0400 	and.w	r4, r2, r0
 8001c02:	ea03 0501 	and.w	r5, r3, r1
 8001c06:	4620      	mov	r0, r4
 8001c08:	4629      	mov	r1, r5
 8001c0a:	f04f 0200 	mov.w	r2, #0
 8001c0e:	f04f 0300 	mov.w	r3, #0
 8001c12:	014b      	lsls	r3, r1, #5
 8001c14:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001c18:	0142      	lsls	r2, r0, #5
 8001c1a:	4610      	mov	r0, r2
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	1b00      	subs	r0, r0, r4
 8001c20:	eb61 0105 	sbc.w	r1, r1, r5
 8001c24:	f04f 0200 	mov.w	r2, #0
 8001c28:	f04f 0300 	mov.w	r3, #0
 8001c2c:	018b      	lsls	r3, r1, #6
 8001c2e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001c32:	0182      	lsls	r2, r0, #6
 8001c34:	1a12      	subs	r2, r2, r0
 8001c36:	eb63 0301 	sbc.w	r3, r3, r1
 8001c3a:	f04f 0000 	mov.w	r0, #0
 8001c3e:	f04f 0100 	mov.w	r1, #0
 8001c42:	00d9      	lsls	r1, r3, #3
 8001c44:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001c48:	00d0      	lsls	r0, r2, #3
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	1912      	adds	r2, r2, r4
 8001c50:	eb45 0303 	adc.w	r3, r5, r3
 8001c54:	f04f 0000 	mov.w	r0, #0
 8001c58:	f04f 0100 	mov.w	r1, #0
 8001c5c:	0299      	lsls	r1, r3, #10
 8001c5e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001c62:	0290      	lsls	r0, r2, #10
 8001c64:	4602      	mov	r2, r0
 8001c66:	460b      	mov	r3, r1
 8001c68:	4610      	mov	r0, r2
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	461a      	mov	r2, r3
 8001c70:	f04f 0300 	mov.w	r3, #0
 8001c74:	f7fe faa8 	bl	80001c8 <__aeabi_uldivmod>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c80:	4b0a      	ldr	r3, [pc, #40]	; (8001cac <HAL_RCC_GetSysClockFreq+0x160>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	0c1b      	lsrs	r3, r3, #16
 8001c86:	f003 0303 	and.w	r3, r3, #3
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001c90:	68fa      	ldr	r2, [r7, #12]
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c98:	60bb      	str	r3, [r7, #8]
      break;
 8001c9a:	e002      	b.n	8001ca2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c9c:	4b04      	ldr	r3, [pc, #16]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0x164>)
 8001c9e:	60bb      	str	r3, [r7, #8]
      break;
 8001ca0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ca2:	68bb      	ldr	r3, [r7, #8]
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3710      	adds	r7, #16
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bdb0      	pop	{r4, r5, r7, pc}
 8001cac:	40023800 	.word	0x40023800
 8001cb0:	00f42400 	.word	0x00f42400
 8001cb4:	017d7840 	.word	0x017d7840

08001cb8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d101      	bne.n	8001cca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e07b      	b.n	8001dc2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d108      	bne.n	8001ce4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001cda:	d009      	beq.n	8001cf0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	61da      	str	r2, [r3, #28]
 8001ce2:	e005      	b.n	8001cf0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2200      	movs	r2, #0
 8001cee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d106      	bne.n	8001d10 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f7fe ff3c 	bl	8000b88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2202      	movs	r2, #2
 8001d14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d26:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001d38:	431a      	orrs	r2, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d42:	431a      	orrs	r2, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	691b      	ldr	r3, [r3, #16]
 8001d48:	f003 0302 	and.w	r3, r3, #2
 8001d4c:	431a      	orrs	r2, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	695b      	ldr	r3, [r3, #20]
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	431a      	orrs	r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	699b      	ldr	r3, [r3, #24]
 8001d5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d60:	431a      	orrs	r2, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	69db      	ldr	r3, [r3, #28]
 8001d66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001d6a:	431a      	orrs	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6a1b      	ldr	r3, [r3, #32]
 8001d70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d74:	ea42 0103 	orr.w	r1, r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d7c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	430a      	orrs	r2, r1
 8001d86:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	0c1b      	lsrs	r3, r3, #16
 8001d8e:	f003 0104 	and.w	r1, r3, #4
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d96:	f003 0210 	and.w	r2, r3, #16
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	69da      	ldr	r2, [r3, #28]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001db0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
	...

08001dcc <__libc_init_array>:
 8001dcc:	b570      	push	{r4, r5, r6, lr}
 8001dce:	4d0d      	ldr	r5, [pc, #52]	; (8001e04 <__libc_init_array+0x38>)
 8001dd0:	4c0d      	ldr	r4, [pc, #52]	; (8001e08 <__libc_init_array+0x3c>)
 8001dd2:	1b64      	subs	r4, r4, r5
 8001dd4:	10a4      	asrs	r4, r4, #2
 8001dd6:	2600      	movs	r6, #0
 8001dd8:	42a6      	cmp	r6, r4
 8001dda:	d109      	bne.n	8001df0 <__libc_init_array+0x24>
 8001ddc:	4d0b      	ldr	r5, [pc, #44]	; (8001e0c <__libc_init_array+0x40>)
 8001dde:	4c0c      	ldr	r4, [pc, #48]	; (8001e10 <__libc_init_array+0x44>)
 8001de0:	f000 f820 	bl	8001e24 <_init>
 8001de4:	1b64      	subs	r4, r4, r5
 8001de6:	10a4      	asrs	r4, r4, #2
 8001de8:	2600      	movs	r6, #0
 8001dea:	42a6      	cmp	r6, r4
 8001dec:	d105      	bne.n	8001dfa <__libc_init_array+0x2e>
 8001dee:	bd70      	pop	{r4, r5, r6, pc}
 8001df0:	f855 3b04 	ldr.w	r3, [r5], #4
 8001df4:	4798      	blx	r3
 8001df6:	3601      	adds	r6, #1
 8001df8:	e7ee      	b.n	8001dd8 <__libc_init_array+0xc>
 8001dfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8001dfe:	4798      	blx	r3
 8001e00:	3601      	adds	r6, #1
 8001e02:	e7f2      	b.n	8001dea <__libc_init_array+0x1e>
 8001e04:	08001e54 	.word	0x08001e54
 8001e08:	08001e54 	.word	0x08001e54
 8001e0c:	08001e54 	.word	0x08001e54
 8001e10:	08001e58 	.word	0x08001e58

08001e14 <memset>:
 8001e14:	4402      	add	r2, r0
 8001e16:	4603      	mov	r3, r0
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d100      	bne.n	8001e1e <memset+0xa>
 8001e1c:	4770      	bx	lr
 8001e1e:	f803 1b01 	strb.w	r1, [r3], #1
 8001e22:	e7f9      	b.n	8001e18 <memset+0x4>

08001e24 <_init>:
 8001e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e26:	bf00      	nop
 8001e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e2a:	bc08      	pop	{r3}
 8001e2c:	469e      	mov	lr, r3
 8001e2e:	4770      	bx	lr

08001e30 <_fini>:
 8001e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e32:	bf00      	nop
 8001e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e36:	bc08      	pop	{r3}
 8001e38:	469e      	mov	lr, r3
 8001e3a:	4770      	bx	lr
